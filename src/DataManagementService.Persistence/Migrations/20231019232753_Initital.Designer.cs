// <auto-generated />
using System;
using DataManagementService.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataManagementService.Persistence.Migrations
{
    [DbContext(typeof(DataManagementServiceContext))]
    [Migration("20231019232753_Initital")]
    partial class Initital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataManagementService.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("acronym")
                        .HasColumnOrder(3);

                    b.Property<int>("Continent")
                        .HasColumnType("int")
                        .HasColumnName("continent")
                        .HasColumnOrder(5);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nationality")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("country");
                });

            modelBuilder.Entity("DataManagementService.Domain.DietaryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("dietary_option");
                });

            modelBuilder.Entity("DataManagementService.Domain.DietaryOptionFoodAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DietaryOptionId")
                        .HasColumnType("int")
                        .HasColumnName("dietary_option_id")
                        .HasColumnOrder(2);

                    b.Property<int>("FoodAttributeId")
                        .HasColumnType("int")
                        .HasColumnName("food_attribute_id")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("DietaryOptionId");

                    b.HasIndex("FoodAttributeId");

                    b.ToTable("dietary_option_food_attribute");
                });

            modelBuilder.Entity("DataManagementService.Domain.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<string>("MostIndicatedTreatment")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("most_indicated_treatment")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("disease");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Influenza, commonly known as the flu, is a viral infection.",
                            MostIndicatedTreatment = "Rest and fluids",
                            Name = "Influenza"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Diabetes is a chronic condition that affects how your body processes glucose.",
                            MostIndicatedTreatment = "Insulin therapy",
                            Name = "Diabetes"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Asthma is a chronic lung condition that causes breathing difficulties.",
                            MostIndicatedTreatment = "Bronchodilators and inhaled corticosteroids",
                            Name = "Asthma"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Hypertension, or high blood pressure, is a condition that increases the risk of heart disease and stroke.",
                            MostIndicatedTreatment = "Lifestyle changes and antihypertensive medications",
                            Name = "Hypertension"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Depression is a mental health disorder characterized by persistent feelings of sadness and loss of interest.",
                            MostIndicatedTreatment = "Therapy and antidepressant medications",
                            Name = "Depression"
                        });
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("disease_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SymptomId")
                        .HasColumnType("int")
                        .HasColumnName("symptom_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SymptomType")
                        .HasColumnType("int")
                        .HasColumnName("symptom_type")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("SymptomId");

                    b.ToTable("disease_disease");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("disease_id")
                        .HasColumnOrder(2);

                    b.Property<int>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("drug_id")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("DrugId");

                    b.ToTable("disease_drug");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseDrugDosage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestTimeToTake")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("best_time_to_take")
                        .HasColumnOrder(4);

                    b.Property<int>("DiseaseDrugId")
                        .HasColumnType("int")
                        .HasColumnName("disease_drug_id")
                        .HasColumnOrder(2);

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int")
                        .HasColumnName("measurement_unit_id")
                        .HasColumnOrder(3);

                    b.Property<string>("MoreDetails")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("more_details")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseDrugId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("disease_drug_dosage");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseDrugDosageAgeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeTimeUnit")
                        .HasColumnType("int")
                        .HasColumnName("age_unit")
                        .HasColumnOrder(3)
                        .HasComment("1=days; 2=months; 3=years");

                    b.Property<int>("DiseaseDrugDosageId")
                        .HasColumnType("int")
                        .HasColumnName("disease_drug_id")
                        .HasColumnOrder(2);

                    b.Property<decimal>("DosageMax")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("dosage_max")
                        .HasColumnOrder(7);

                    b.Property<decimal>("DosageMin")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("dosage_min")
                        .HasColumnOrder(6);

                    b.Property<int>("MaxUsagePeriod")
                        .HasColumnType("int")
                        .HasColumnName("max_usage_period")
                        .HasColumnOrder(8)
                        .HasComment("in days");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("int")
                        .HasColumnName("time_max")
                        .HasColumnOrder(5);

                    b.Property<int>("MinimumAge")
                        .HasColumnType("int")
                        .HasColumnName("time_min")
                        .HasColumnOrder(4);

                    b.Property<bool>("RecommendedFirstQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_first_quarter")
                        .HasColumnOrder(9);

                    b.Property<bool>("RecommendedFourthQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_fourth_quarter")
                        .HasColumnOrder(12);

                    b.Property<bool>("RecommendedSecondQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_second_quarter")
                        .HasColumnOrder(10);

                    b.Property<bool>("RecommendedThirdQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_third_quarter")
                        .HasColumnOrder(11);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseDrugDosageId");

                    b.ToTable("disease_drug_dosage_age_range");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("disease_id")
                        .HasColumnOrder(2);

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("exam_id")
                        .HasColumnOrder(3);

                    b.Property<int>("ExamResult")
                        .HasColumnType("int")
                        .HasColumnName("exam_result")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("ExamId");

                    b.ToTable("disease_exam");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("disease_id")
                        .HasColumnOrder(2);

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("FoodId");

                    b.ToTable("disease_food");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseFoodDosage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestTimeToTake")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("best_time_to_take")
                        .HasColumnOrder(4);

                    b.Property<int>("DiseaseFoodId")
                        .HasColumnType("int")
                        .HasColumnName("disease_food_id")
                        .HasColumnOrder(2);

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int")
                        .HasColumnName("measurement_unit_id")
                        .HasColumnOrder(3);

                    b.Property<string>("MoreDetails")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("more_details")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseFoodId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("disease_food_dosage");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseFoodDosageAgeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeTimeUnit")
                        .HasColumnType("int")
                        .HasColumnName("age_unit")
                        .HasColumnOrder(3)
                        .HasComment("1=days; 2=months; 3=years");

                    b.Property<int>("DiseaseFoodDosageId")
                        .HasColumnType("int")
                        .HasColumnName("disease_food_id")
                        .HasColumnOrder(2);

                    b.Property<decimal>("DosageMax")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("dosage_max")
                        .HasColumnOrder(7);

                    b.Property<decimal>("DosageMin")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("dosage_min")
                        .HasColumnOrder(6);

                    b.Property<int>("MaxUsagePeriod")
                        .HasColumnType("int")
                        .HasColumnName("max_usage_period")
                        .HasColumnOrder(8)
                        .HasComment("in days");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("int")
                        .HasColumnName("time_max")
                        .HasColumnOrder(5);

                    b.Property<int>("MinimumAge")
                        .HasColumnType("int")
                        .HasColumnName("time_min")
                        .HasColumnOrder(4);

                    b.Property<bool>("RecommendedFirstQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_first_quarter")
                        .HasColumnOrder(9);

                    b.Property<bool>("RecommendedFourthQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_fourth_quarter")
                        .HasColumnOrder(12);

                    b.Property<bool>("RecommendedSecondQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_second_quarter")
                        .HasColumnOrder(10);

                    b.Property<bool>("RecommendedThirdQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_third_quarter")
                        .HasColumnOrder(11);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseFoodDosageId");

                    b.ToTable("disease_food_dosage_age_range");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseLifestyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int")
                        .HasColumnName("patient_action")
                        .HasColumnOrder(4);

                    b.Property<int>("ActionIntensity")
                        .HasColumnType("int")
                        .HasColumnName("patient_action_intensity")
                        .HasColumnOrder(5);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("disease_id")
                        .HasColumnOrder(2);

                    b.Property<int>("LifestyleId")
                        .HasColumnType("int")
                        .HasColumnName("lifestyle_id")
                        .HasColumnOrder(3);

                    b.Property<string>("MoreDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("more_details")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("LifestyleId");

                    b.ToTable("disease_lifestyle");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseSupplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("disease_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SupplementId")
                        .HasColumnType("int")
                        .HasColumnName("supplement_id")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("SupplementId");

                    b.ToTable("disease_supplement");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseSupplementDosage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestTimeToTake")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("best_time_to_take")
                        .HasColumnOrder(4);

                    b.Property<int>("DiseaseSupplementId")
                        .HasColumnType("int")
                        .HasColumnName("disease_supplement_id")
                        .HasColumnOrder(2);

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int")
                        .HasColumnName("measurement_unit_id")
                        .HasColumnOrder(3);

                    b.Property<string>("MoreDetails")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("more_details")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseSupplementId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("disease_supplement_dosage");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseSupplementDosageAgeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeTimeUnit")
                        .HasColumnType("int")
                        .HasColumnName("age_unit")
                        .HasColumnOrder(3)
                        .HasComment("1=days; 2=months; 3=years");

                    b.Property<int>("DiseaseSupplementDosageId")
                        .HasColumnType("int")
                        .HasColumnName("disease_supplement_id")
                        .HasColumnOrder(2);

                    b.Property<decimal>("DosageMax")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("dosage_max")
                        .HasColumnOrder(7);

                    b.Property<decimal>("DosageMin")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("dosage_min")
                        .HasColumnOrder(6);

                    b.Property<int>("MaxUsagePeriod")
                        .HasColumnType("int")
                        .HasColumnName("max_usage_period")
                        .HasColumnOrder(8)
                        .HasComment("in days");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("int")
                        .HasColumnName("time_max")
                        .HasColumnOrder(5);

                    b.Property<int>("MinimumAge")
                        .HasColumnType("int")
                        .HasColumnName("time_min")
                        .HasColumnOrder(4);

                    b.Property<bool>("RecommendedFirstQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_first_quarter")
                        .HasColumnOrder(9);

                    b.Property<bool>("RecommendedFourthQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_fourth_quarter")
                        .HasColumnOrder(12);

                    b.Property<bool>("RecommendedSecondQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_second_quarter")
                        .HasColumnOrder(10);

                    b.Property<bool>("RecommendedThirdQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_third_quarter")
                        .HasColumnOrder(11);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseSupplementDosageId");

                    b.ToTable("disease_supplement_dosage_age_range");
                });

            modelBuilder.Entity("DataManagementService.Domain.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestTimeToTake")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("best_time_to_take")
                        .HasColumnOrder(6);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<string>("Interactions")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("interactions")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("Precautions")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("precautions")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("drug");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BestTimeToTake = "Take with food to reduce stomach irritation.",
                            Description = "Aspirin is a common pain reliever and anti-inflammatory drug.",
                            Interactions = "May interact with blood-thinning medications.",
                            Name = "Aspirin",
                            Precautions = "Should not be taken by individuals with bleeding disorders."
                        },
                        new
                        {
                            Id = 2,
                            BestTimeToTake = "Usually taken with meals to reduce gastrointestinal symptoms.",
                            Description = "Metformin is an oral medication used to treat type 2 diabetes.",
                            Interactions = "May interact with certain heart and kidney medications.",
                            Name = "Metformin",
                            Precautions = "Should not be used by individuals with kidney problems."
                        },
                        new
                        {
                            Id = 3,
                            BestTimeToTake = "Use as needed during asthma attacks.",
                            Description = "Ventolin is a bronchodilator used to relieve asthma symptoms.",
                            Interactions = "May interact with other medications that affect heart rate.",
                            Name = "Ventolin",
                            Precautions = "Should not be overused; follow doctor's instructions."
                        },
                        new
                        {
                            Id = 4,
                            BestTimeToTake = "Usually taken once daily, with or without food.",
                            Description = "Lisinopril is an angiotensin-converting enzyme (ACE) inhibitor used to treat hypertension.",
                            Interactions = "May interact with diuretics and other blood pressure medications.",
                            Name = "Lisinopril",
                            Precautions = "Monitor blood pressure regularly while taking this medication."
                        },
                        new
                        {
                            Id = 5,
                            BestTimeToTake = "Usually taken in the morning to avoid insomnia.",
                            Description = "Prozac is an antidepressant medication used to treat depression and anxiety disorders.",
                            Interactions = "May interact with other medications that affect serotonin levels.",
                            Name = "Prozac",
                            Precautions = "Should not be abruptly discontinued; consult a doctor."
                        });
                });

            modelBuilder.Entity("DataManagementService.Domain.DrugDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("disease_id")
                        .HasColumnOrder(3);

                    b.Property<int>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("drug_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("DrugId");

                    b.ToTable("drug_disease");
                });

            modelBuilder.Entity("DataManagementService.Domain.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("Prerequisite")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("prerequisite")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A comprehensive blood test that provides information about your health.",
                            Name = "Blood Panel",
                            Prerequisite = "Fasting for at least 8 hours before the test."
                        },
                        new
                        {
                            Id = 2,
                            Description = "Measures your levels of different types of cholesterol in the blood.",
                            Name = "Cholesterol Test",
                            Prerequisite = "Fasting for at least 9 to 12 hours before the test."
                        },
                        new
                        {
                            Id = 3,
                            Description = "Evaluates how well your thyroid gland is functioning.",
                            Name = "Thyroid Function Test",
                            Prerequisite = "May require fasting and avoiding certain medications before the test."
                        },
                        new
                        {
                            Id = 4,
                            Description = "Records the electrical activity of your heart over a period of time.",
                            Name = "Electrocardiogram (ECG or EKG)",
                            Prerequisite = "No special preparations required."
                        },
                        new
                        {
                            Id = 5,
                            Description = "Measures bone mineral density to assess the risk of osteoporosis.",
                            Name = "Bone Density Test",
                            Prerequisite = "No special preparations required."
                        });
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int")
                        .HasColumnName("action")
                        .HasColumnOrder(5);

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("exam_id")
                        .HasColumnOrder(3);

                    b.Property<int>("ExamResult")
                        .HasColumnType("int")
                        .HasColumnName("exam_result")
                        .HasColumnOrder(4);

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("FoodId");

                    b.ToTable("exam_food");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamLifestyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int")
                        .HasColumnName("patient_action")
                        .HasColumnOrder(5);

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("exam_id")
                        .HasColumnOrder(3);

                    b.Property<int>("ExamResult")
                        .HasColumnType("int")
                        .HasColumnName("exam_result")
                        .HasColumnOrder(4);

                    b.Property<int>("LifestyleId")
                        .HasColumnType("int")
                        .HasColumnName("lifestyle_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("LifestyleId");

                    b.ToTable("exam_lifestyle");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamResultReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("exam_id")
                        .HasColumnOrder(2);

                    b.Property<decimal>("MaximumReference")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("maximum_reference")
                        .HasColumnOrder(5);

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int")
                        .HasColumnName("measurement_unit_id")
                        .HasColumnOrder(3);

                    b.Property<decimal>("MinimumReference")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("minimum_reference")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("exam_result_reference");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamResultReferenceCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id")
                        .HasColumnOrder(3);

                    b.Property<int>("ExamResultReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("exam_result_reference_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ExamResultReferenceId");

                    b.ToTable("exam_result_reference_country");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamResultReferenceVariation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeTimeUnit")
                        .HasColumnType("int")
                        .HasColumnName("age_unit")
                        .HasColumnOrder(5);

                    b.Property<int>("ExamResultReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("exam_result_reference_id")
                        .HasColumnOrder(2);

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender")
                        .HasColumnOrder(8);

                    b.Property<decimal>("MaximumReference")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("maximum_reference")
                        .HasColumnOrder(4);

                    b.Property<bool>("MenopauseRequired")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("menopause_required")
                        .HasColumnOrder(10);

                    b.Property<decimal>("MinimumReference")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("minimum_reference")
                        .HasColumnOrder(3);

                    b.Property<int>("PatientMaximumAge")
                        .HasColumnType("int")
                        .HasColumnName("patient_maximum_age")
                        .HasColumnOrder(7);

                    b.Property<int>("PatientMinimumAge")
                        .HasColumnType("int")
                        .HasColumnName("patient_minimum_age")
                        .HasColumnOrder(6);

                    b.Property<bool>("PregnancyRequired")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("pregnancy_required")
                        .HasColumnOrder(9);

                    b.HasKey("Id");

                    b.HasIndex("ExamResultReferenceId");

                    b.ToTable("exam_result_reference_variation");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamSupplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("exam_id")
                        .HasColumnOrder(3);

                    b.Property<int>("ExamResult")
                        .HasColumnType("int")
                        .HasColumnName("exam_result")
                        .HasColumnOrder(4);

                    b.Property<int>("SupplementId")
                        .HasColumnType("int")
                        .HasColumnName("supplement_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("SupplementId");

                    b.ToTable("exam_supplement");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamSupplementDosage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestTimeToTake")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("best_time_to_take")
                        .HasColumnOrder(4);

                    b.Property<int>("ExamSupplementId")
                        .HasColumnType("int")
                        .HasColumnName("exam_supplement_id")
                        .HasColumnOrder(2);

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int")
                        .HasColumnName("measurement_unit_id")
                        .HasColumnOrder(3);

                    b.Property<string>("MoreDetails")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("more_details")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("ExamSupplementId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("exam_supplement_dosage");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamSupplementDosageAgeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeTimeUnit")
                        .HasColumnType("int")
                        .HasColumnName("age_unit")
                        .HasColumnOrder(3)
                        .HasComment("1=days; 2=months; 3=years");

                    b.Property<decimal>("DosageMax")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("dosage_max")
                        .HasColumnOrder(7);

                    b.Property<decimal>("DosageMin")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("dosage_min")
                        .HasColumnOrder(6);

                    b.Property<int>("ExamSupplementDosageId")
                        .HasColumnType("int")
                        .HasColumnName("exam_supplement_id")
                        .HasColumnOrder(2);

                    b.Property<int>("MaxUsagePeriod")
                        .HasColumnType("int")
                        .HasColumnName("max_usage_period")
                        .HasColumnOrder(8)
                        .HasComment("in days");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("int")
                        .HasColumnName("time_max")
                        .HasColumnOrder(5);

                    b.Property<int>("MinimumAge")
                        .HasColumnType("int")
                        .HasColumnName("time_min")
                        .HasColumnOrder(4);

                    b.Property<bool>("RecommendedFirstQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_first_quarter")
                        .HasColumnOrder(9);

                    b.Property<bool>("RecommendedFourthQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_fourth_quarter")
                        .HasColumnOrder(12);

                    b.Property<bool>("RecommendedSecondQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_second_quarter")
                        .HasColumnOrder(10);

                    b.Property<bool>("RecommendedThirdQuarter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recommended_third_quarter")
                        .HasColumnOrder(11);

                    b.HasKey("Id");

                    b.HasIndex("ExamSupplementDosageId");

                    b.ToTable("exam_supplement_dosage_age_range");
                });

            modelBuilder.Entity("DataManagementService.Domain.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestTimeToTake")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("best_time_to_take")
                        .HasColumnOrder(6);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<string>("Interactions")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("interactions")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("Precautions")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("precautions")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("food");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Salmon is a fatty fish rich in omega-3 fatty acids.",
                            Interactions = "May interact with blood-thinning medications.",
                            Name = "Salmon"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Broccoli is a cruciferous vegetable known for its health benefits.",
                            Interactions = "No significant interactions reported.",
                            Name = "Broccoli"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Blueberries are packed with antioxidants and nutrients.",
                            Interactions = "No significant interactions reported.",
                            Name = "Blueberries"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Almonds are a nutritious and protein-rich nut.",
                            Interactions = "May interact with medications that lower blood sugar.",
                            Name = "Almonds"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Spinach is a leafy green vegetable packed with vitamins and minerals.",
                            Interactions = "May interact with blood-thinning medications.",
                            Name = "Spinach"
                        });
                });

            modelBuilder.Entity("DataManagementService.Domain.FoodAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("food_attribute");
                });

            modelBuilder.Entity("DataManagementService.Domain.FoodDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("disease_id")
                        .HasColumnOrder(3);

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("FoodId");

                    b.ToTable("food_disease");
                });

            modelBuilder.Entity("DataManagementService.Domain.FoodHealtyObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id")
                        .HasColumnOrder(2);

                    b.Property<int>("HealtyObjectiveId")
                        .HasColumnType("int")
                        .HasColumnName("healty_objective_id")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("HealtyObjectiveId");

                    b.ToTable("food_healty_objective");
                });

            modelBuilder.Entity("DataManagementService.Domain.FoodRelatedAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FoodAttributeId")
                        .HasColumnType("int")
                        .HasColumnName("food_attribute_id")
                        .HasColumnOrder(3);

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("FoodAttributeId");

                    b.HasIndex("FoodId");

                    b.ToTable("food_related_attribute");
                });

            modelBuilder.Entity("DataManagementService.Domain.FoodSupplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id")
                        .HasColumnOrder(2);

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int")
                        .HasColumnName("measurement_unit_id")
                        .HasColumnOrder(5);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(11,5)")
                        .HasColumnName("quantity")
                        .HasColumnOrder(4);

                    b.Property<int>("SupplementId")
                        .HasColumnType("int")
                        .HasColumnName("supplement_id")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("SupplementId");

                    b.ToTable("food_supplement");
                });

            modelBuilder.Entity("DataManagementService.Domain.HealtyObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("healty_objective");
                });

            modelBuilder.Entity("DataManagementService.Domain.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("first_name")
                        .HasColumnOrder(2);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("last_name")
                        .HasColumnOrder(3);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataManagementService.Domain.Identity.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageProfile")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("image_profile")
                        .HasColumnOrder(3);

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_details");
                });

            modelBuilder.Entity("DataManagementService.Domain.Lifestyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<string>("Interactions")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("interactions")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("Precautions")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("precautions")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("lifestyle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Engaging in regular physical activity has numerous health benefits.",
                            Interactions = "May interact with certain medical conditions and medications.",
                            Name = "Regular Exercise",
                            Precautions = "Consult a healthcare professional before starting a new exercise program."
                        },
                        new
                        {
                            Id = 2,
                            Description = "Eating a balanced and nutritious diet supports overall well-being.",
                            Interactions = "May interact with certain medical conditions and medications.",
                            Name = "Healthy Diet",
                            Precautions = "Consult a registered dietitian for personalized dietary guidance."
                        },
                        new
                        {
                            Id = 3,
                            Description = "Effective stress management techniques promote mental and emotional health.",
                            Interactions = "May interact with mental health conditions and medications.",
                            Name = "Stress Management",
                            Precautions = "Explore relaxation techniques like meditation and deep breathing."
                        },
                        new
                        {
                            Id = 4,
                            Description = "Getting enough quality sleep is essential for physical and mental recovery.",
                            Interactions = "May interact with sleep disorders and certain medications.",
                            Name = "Adequate Sleep",
                            Precautions = "Prioritize a consistent sleep schedule and create a sleep-conducive environment."
                        },
                        new
                        {
                            Id = 5,
                            Description = "Avoiding tobacco products reduces the risk of various health issues.",
                            Interactions = "Tobacco interacts negatively with almost all bodily systems.",
                            Name = "Tobacco-Free",
                            Precautions = "Seek professional help if you want to quit smoking or using tobacco."
                        });
                });

            modelBuilder.Entity("DataManagementService.Domain.LifestyleDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("disease_id")
                        .HasColumnOrder(3);

                    b.Property<int>("LifestyleId")
                        .HasColumnType("int")
                        .HasColumnName("lifestyle_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("LifestyleId");

                    b.ToTable("lifestyle_disease");
                });

            modelBuilder.Entity("DataManagementService.Domain.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("PreparationMethod")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("preparation_method")
                        .HasColumnOrder(4);

                    b.Property<int>("TotalCalories")
                        .HasColumnType("int")
                        .HasColumnName("total_calories")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("meal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A healthy salad with grilled chicken, mixed greens, and assorted vegetables.",
                            Name = "Grilled Chicken Salad",
                            PreparationMethod = "Grill the chicken and toss it with fresh vegetables and dressing.",
                            TotalCalories = 350
                        },
                        new
                        {
                            Id = 2,
                            Description = "A colorful stir-fry with a variety of vegetables and tofu.",
                            Name = "Vegetable Stir-Fry",
                            PreparationMethod = "Stir-fry the vegetables and tofu with your favorite sauce.",
                            TotalCalories = 300
                        },
                        new
                        {
                            Id = 3,
                            Description = "Baked salmon served with a side of quinoa and steamed vegetables.",
                            Name = "Salmon with Quinoa",
                            PreparationMethod = "Season the salmon, bake it, and serve with cooked quinoa.",
                            TotalCalories = 400
                        },
                        new
                        {
                            Id = 4,
                            Description = "A hearty breakfast bowl with oats, berries, nuts, and yogurt.",
                            Name = "Oatmeal Breakfast Bowl",
                            PreparationMethod = "Cook oats, top with berries, nuts, and yogurt.",
                            TotalCalories = 250
                        },
                        new
                        {
                            Id = 5,
                            Description = "Classic spaghetti dish with tomato marinara sauce and grated cheese.",
                            Name = "Spaghetti with Marinara Sauce",
                            PreparationMethod = "Cook spaghetti and top with marinara sauce and cheese.",
                            TotalCalories = 350
                        });
                });

            modelBuilder.Entity("DataManagementService.Domain.MealCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id")
                        .HasColumnOrder(3);

                    b.Property<int>("MealId")
                        .HasColumnType("int")
                        .HasColumnName("meal_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MealId");

                    b.ToTable("meal_country");
                });

            modelBuilder.Entity("DataManagementService.Domain.MealDietaryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DietaryOptionId")
                        .HasColumnType("int")
                        .HasColumnName("dietary_option_id")
                        .HasColumnOrder(3);

                    b.Property<int>("MealId")
                        .HasColumnType("int")
                        .HasColumnName("meal_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DietaryOptionId");

                    b.HasIndex("MealId");

                    b.ToTable("meal_dietary_option");
                });

            modelBuilder.Entity("DataManagementService.Domain.MealFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id")
                        .HasColumnOrder(3);

                    b.Property<decimal>("FoodPortion")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("food_portion")
                        .HasColumnOrder(4);

                    b.Property<int>("MealId")
                        .HasColumnType("int")
                        .HasColumnName("meal_id")
                        .HasColumnOrder(2);

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int")
                        .HasColumnName("measurement_unit_id")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("meal_food");
                });

            modelBuilder.Entity("DataManagementService.Domain.MealPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MealId")
                        .HasColumnType("int")
                        .HasColumnName("meal_id")
                        .HasColumnOrder(2);

                    b.Property<int>("MealTime")
                        .HasColumnType("int")
                        .HasColumnName("meal_period_id")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.ToTable("meal_period");
                });

            modelBuilder.Entity("DataManagementService.Domain.MeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("acronym")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("measurement_unit");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Acronym = "g",
                            Description = "A metric unit of mass.",
                            Name = "Gram"
                        },
                        new
                        {
                            Id = 2,
                            Acronym = "ml",
                            Description = "A metric unit of volume.",
                            Name = "Milliliter"
                        },
                        new
                        {
                            Id = 3,
                            Acronym = "cup",
                            Description = "A customary unit of volume.",
                            Name = "Cup"
                        },
                        new
                        {
                            Id = 4,
                            Acronym = "tsp",
                            Description = "A customary unit of volume for small amounts of liquids.",
                            Name = "Teaspoon"
                        },
                        new
                        {
                            Id = 5,
                            Acronym = "tbsp",
                            Description = "A customary unit of volume for larger amounts of liquids.",
                            Name = "Tablespoon"
                        },
                        new
                        {
                            Id = 6,
                            Acronym = "drop",
                            Description = "A small amount of liquid typically dispensed by dropper.",
                            Name = "Drop"
                        },
                        new
                        {
                            Id = 7,
                            Acronym = "tab",
                            Description = "A solid dose of medication typically in a flat, round shape.",
                            Name = "Tablet"
                        },
                        new
                        {
                            Id = 8,
                            Acronym = "pill",
                            Description = "A solid dose of medication typically in a small, cylindrical shape.",
                            Name = "Pill"
                        });
                });

            modelBuilder.Entity("DataManagementService.Domain.Supplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestTimeToTake")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("best_time_to_take")
                        .HasColumnOrder(6);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<string>("Interactions")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("interactions")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("Precautions")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("precautions")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("supplement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BestTimeToTake = "Can be taken with food to enhance absorption.",
                            Description = "Vitamin D is essential for strong bones and immune function.",
                            Interactions = "May interact with certain heart and kidney medications.",
                            Name = "Vitamin D",
                            Precautions = "Monitor vitamin D levels if taking high doses."
                        },
                        new
                        {
                            Id = 2,
                            BestTimeToTake = "Can be taken with meals to reduce gastrointestinal symptoms.",
                            Description = "Omega-3 fatty acids are beneficial for heart and brain health.",
                            Interactions = "May interact with blood-thinning medications.",
                            Name = "Omega-3 Fatty Acids",
                            Precautions = "Choose high-quality supplements to avoid contaminants."
                        },
                        new
                        {
                            Id = 3,
                            BestTimeToTake = "Best taken on an empty stomach.",
                            Description = "Probiotics promote a healthy balance of gut bacteria.",
                            Interactions = "May interact with immunosuppressive medications.",
                            Name = "Probiotics",
                            Precautions = "Choose strains with scientific support for desired effects."
                        },
                        new
                        {
                            Id = 4,
                            BestTimeToTake = "Take on an empty stomach with vitamin C for better absorption.",
                            Description = "Iron is important for the production of red blood cells.",
                            Interactions = "May interact with certain antibiotics and antacids.",
                            Name = "Iron",
                            Precautions = "Should not be taken with calcium-rich foods or supplements."
                        },
                        new
                        {
                            Id = 5,
                            BestTimeToTake = "Can be taken with meals to reduce gastrointestinal symptoms.",
                            Description = "Magnesium is essential for nerve and muscle function.",
                            Interactions = "May interact with certain medications for heart and bones.",
                            Name = "Magnesium",
                            Precautions = "Avoid excessive magnesium intake, as it can be toxic."
                        });
                });

            modelBuilder.Entity("DataManagementService.Domain.SupplementDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("disease_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SupplementId")
                        .HasColumnType("int")
                        .HasColumnName("supplement_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("SupplementId");

                    b.ToTable("supplement_disease");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataManagementService.Domain.DietaryOptionFoodAttribute", b =>
                {
                    b.HasOne("DataManagementService.Domain.DietaryOption", "DietaryOption")
                        .WithMany("Incompatibilities")
                        .HasForeignKey("DietaryOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.FoodAttribute", "FoodAttribute")
                        .WithMany("Incompatibilities")
                        .HasForeignKey("FoodAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietaryOption");

                    b.Navigation("FoodAttribute");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseDisease", b =>
                {
                    b.HasOne("DataManagementService.Domain.Disease", "Disease")
                        .WithMany("DiagnoseSymptoms")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Disease", "Symptom")
                        .WithMany("SymptomOfDiseases")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseDrug", b =>
                {
                    b.HasOne("DataManagementService.Domain.Disease", "Disease")
                        .WithMany("TreatmentDrugs")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Drug", "Drug")
                        .WithMany("TreatableDiseases")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseDrugDosage", b =>
                {
                    b.HasOne("DataManagementService.Domain.DiseaseDrug", "DiseaseDrug")
                        .WithMany("Dosages")
                        .HasForeignKey("DiseaseDrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseDrug");

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseDrugDosageAgeRange", b =>
                {
                    b.HasOne("DataManagementService.Domain.DiseaseDrugDosage", "DiseaseDrugDosage")
                        .WithMany("AgeRanges")
                        .HasForeignKey("DiseaseDrugDosageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseDrugDosage");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseExam", b =>
                {
                    b.HasOne("DataManagementService.Domain.Disease", "Disease")
                        .WithMany("DiagnoseExams")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Exam", "Exam")
                        .WithMany("RelatedDiseases")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseFood", b =>
                {
                    b.HasOne("DataManagementService.Domain.Disease", "Disease")
                        .WithMany("TreatmentFoods")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Food", "Food")
                        .WithMany("TreatableDiseases")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseFoodDosage", b =>
                {
                    b.HasOne("DataManagementService.Domain.DiseaseFood", "DiseaseFood")
                        .WithMany("Dosages")
                        .HasForeignKey("DiseaseFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseFood");

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseFoodDosageAgeRange", b =>
                {
                    b.HasOne("DataManagementService.Domain.DiseaseFoodDosage", "DiseaseFoodDosage")
                        .WithMany("AgeRanges")
                        .HasForeignKey("DiseaseFoodDosageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseFoodDosage");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseLifestyle", b =>
                {
                    b.HasOne("DataManagementService.Domain.Disease", "Disease")
                        .WithMany("TreatmentLifestyles")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Lifestyle", "Lifestyle")
                        .WithMany("RelatedDiseases")
                        .HasForeignKey("LifestyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Lifestyle");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseSupplement", b =>
                {
                    b.HasOne("DataManagementService.Domain.Disease", "Disease")
                        .WithMany("TreatmentSupplements")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Supplement", "Supplement")
                        .WithMany("TreatableDiseases")
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseSupplementDosage", b =>
                {
                    b.HasOne("DataManagementService.Domain.DiseaseSupplement", "DiseaseSupplement")
                        .WithMany("Dosages")
                        .HasForeignKey("DiseaseSupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseSupplement");

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseSupplementDosageAgeRange", b =>
                {
                    b.HasOne("DataManagementService.Domain.DiseaseSupplementDosage", "DiseaseSupplementDosage")
                        .WithMany("AgeRanges")
                        .HasForeignKey("DiseaseSupplementDosageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseSupplementDosage");
                });

            modelBuilder.Entity("DataManagementService.Domain.DrugDisease", b =>
                {
                    b.HasOne("DataManagementService.Domain.Disease", "Disease")
                        .WithMany("SideEffectOfDrugs")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Drug", "Drug")
                        .WithMany("SideEffects")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamFood", b =>
                {
                    b.HasOne("DataManagementService.Domain.Exam", "Exam")
                        .WithMany("RelatedFoods")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Food", "Food")
                        .WithMany("RelatedExams")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamLifestyle", b =>
                {
                    b.HasOne("DataManagementService.Domain.Exam", "Exam")
                        .WithMany("RelatedLifestyles")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Lifestyle", "Lifestyle")
                        .WithMany("RelatedExams")
                        .HasForeignKey("LifestyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Lifestyle");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamResultReference", b =>
                {
                    b.HasOne("DataManagementService.Domain.Exam", "Exam")
                        .WithMany("ExamResultReferences")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamResultReferenceCountry", b =>
                {
                    b.HasOne("DataManagementService.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.ExamResultReference", "ExamResultReference")
                        .WithMany("Countries")
                        .HasForeignKey("ExamResultReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("ExamResultReference");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamResultReferenceVariation", b =>
                {
                    b.HasOne("DataManagementService.Domain.ExamResultReference", "ExamResultReference")
                        .WithMany("Variations")
                        .HasForeignKey("ExamResultReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamResultReference");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamSupplement", b =>
                {
                    b.HasOne("DataManagementService.Domain.Exam", "Exam")
                        .WithMany("RelatedSupplements")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Supplement", "Supplement")
                        .WithMany("RelatedExams")
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamSupplementDosage", b =>
                {
                    b.HasOne("DataManagementService.Domain.ExamSupplement", "ExamSupplement")
                        .WithMany("Dosages")
                        .HasForeignKey("ExamSupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamSupplement");

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamSupplementDosageAgeRange", b =>
                {
                    b.HasOne("DataManagementService.Domain.ExamSupplementDosage", "ExamSupplementDosage")
                        .WithMany("AgeRanges")
                        .HasForeignKey("ExamSupplementDosageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamSupplementDosage");
                });

            modelBuilder.Entity("DataManagementService.Domain.FoodDisease", b =>
                {
                    b.HasOne("DataManagementService.Domain.Disease", "Disease")
                        .WithMany("SideEffectOfFoods")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Food", "Food")
                        .WithMany("SideEffects")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("DataManagementService.Domain.FoodHealtyObjective", b =>
                {
                    b.HasOne("DataManagementService.Domain.Food", "Food")
                        .WithMany("RelatedHealtyObjectives")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.HealtyObjective", "HealtyObjective")
                        .WithMany("RelatedFoods")
                        .HasForeignKey("HealtyObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("HealtyObjective");
                });

            modelBuilder.Entity("DataManagementService.Domain.FoodRelatedAttribute", b =>
                {
                    b.HasOne("DataManagementService.Domain.FoodAttribute", "FoodAttribute")
                        .WithMany("RelatedFoods")
                        .HasForeignKey("FoodAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Food", "Food")
                        .WithMany("Attributes")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("FoodAttribute");
                });

            modelBuilder.Entity("DataManagementService.Domain.FoodSupplement", b =>
                {
                    b.HasOne("DataManagementService.Domain.Food", "Food")
                        .WithMany("Nutrients")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Supplement", "Supplement")
                        .WithMany("FoundIn")
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("DataManagementService.Domain.Identity.UserDetails", b =>
                {
                    b.HasOne("DataManagementService.Domain.Identity.User", "User")
                        .WithOne("Details")
                        .HasForeignKey("DataManagementService.Domain.Identity.UserDetails", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataManagementService.Domain.LifestyleDisease", b =>
                {
                    b.HasOne("DataManagementService.Domain.Disease", "Disease")
                        .WithMany("SideEffectOfLifestyles")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Lifestyle", "Lifestyle")
                        .WithMany("SideEffects")
                        .HasForeignKey("LifestyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Lifestyle");
                });

            modelBuilder.Entity("DataManagementService.Domain.MealCountry", b =>
                {
                    b.HasOne("DataManagementService.Domain.Country", "Country")
                        .WithMany("MealCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Meal", "Meal")
                        .WithMany("InternationalCuisines")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("DataManagementService.Domain.MealDietaryOption", b =>
                {
                    b.HasOne("DataManagementService.Domain.DietaryOption", "DietaryOption")
                        .WithMany("MealDietaryOptions")
                        .HasForeignKey("DietaryOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Meal", "Meal")
                        .WithMany("MealDietaryOptions")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietaryOption");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("DataManagementService.Domain.MealFood", b =>
                {
                    b.HasOne("DataManagementService.Domain.Food", "Food")
                        .WithMany("FoundIn")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Meal", "Meal")
                        .WithMany("Ingredients")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Meal");

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("DataManagementService.Domain.MealPeriod", b =>
                {
                    b.HasOne("DataManagementService.Domain.Meal", "Meal")
                        .WithMany("MealPeriods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("DataManagementService.Domain.SupplementDisease", b =>
                {
                    b.HasOne("DataManagementService.Domain.Disease", "Disease")
                        .WithMany("SideEffectOfSupplements")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Supplement", "Supplement")
                        .WithMany("SideEffects")
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataManagementService.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataManagementService.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManagementService.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataManagementService.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataManagementService.Domain.Country", b =>
                {
                    b.Navigation("MealCountries");
                });

            modelBuilder.Entity("DataManagementService.Domain.DietaryOption", b =>
                {
                    b.Navigation("Incompatibilities");

                    b.Navigation("MealDietaryOptions");
                });

            modelBuilder.Entity("DataManagementService.Domain.Disease", b =>
                {
                    b.Navigation("DiagnoseExams");

                    b.Navigation("DiagnoseSymptoms");

                    b.Navigation("SideEffectOfDrugs");

                    b.Navigation("SideEffectOfFoods");

                    b.Navigation("SideEffectOfLifestyles");

                    b.Navigation("SideEffectOfSupplements");

                    b.Navigation("SymptomOfDiseases");

                    b.Navigation("TreatmentDrugs");

                    b.Navigation("TreatmentFoods");

                    b.Navigation("TreatmentLifestyles");

                    b.Navigation("TreatmentSupplements");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseDrug", b =>
                {
                    b.Navigation("Dosages");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseDrugDosage", b =>
                {
                    b.Navigation("AgeRanges");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseFood", b =>
                {
                    b.Navigation("Dosages");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseFoodDosage", b =>
                {
                    b.Navigation("AgeRanges");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseSupplement", b =>
                {
                    b.Navigation("Dosages");
                });

            modelBuilder.Entity("DataManagementService.Domain.DiseaseSupplementDosage", b =>
                {
                    b.Navigation("AgeRanges");
                });

            modelBuilder.Entity("DataManagementService.Domain.Drug", b =>
                {
                    b.Navigation("SideEffects");

                    b.Navigation("TreatableDiseases");
                });

            modelBuilder.Entity("DataManagementService.Domain.Exam", b =>
                {
                    b.Navigation("ExamResultReferences");

                    b.Navigation("RelatedDiseases");

                    b.Navigation("RelatedFoods");

                    b.Navigation("RelatedLifestyles");

                    b.Navigation("RelatedSupplements");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamResultReference", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("Variations");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamSupplement", b =>
                {
                    b.Navigation("Dosages");
                });

            modelBuilder.Entity("DataManagementService.Domain.ExamSupplementDosage", b =>
                {
                    b.Navigation("AgeRanges");
                });

            modelBuilder.Entity("DataManagementService.Domain.Food", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("FoundIn");

                    b.Navigation("Nutrients");

                    b.Navigation("RelatedExams");

                    b.Navigation("RelatedHealtyObjectives");

                    b.Navigation("SideEffects");

                    b.Navigation("TreatableDiseases");
                });

            modelBuilder.Entity("DataManagementService.Domain.FoodAttribute", b =>
                {
                    b.Navigation("Incompatibilities");

                    b.Navigation("RelatedFoods");
                });

            modelBuilder.Entity("DataManagementService.Domain.HealtyObjective", b =>
                {
                    b.Navigation("RelatedFoods");
                });

            modelBuilder.Entity("DataManagementService.Domain.Identity.User", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("DataManagementService.Domain.Lifestyle", b =>
                {
                    b.Navigation("RelatedDiseases");

                    b.Navigation("RelatedExams");

                    b.Navigation("SideEffects");
                });

            modelBuilder.Entity("DataManagementService.Domain.Meal", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("InternationalCuisines");

                    b.Navigation("MealDietaryOptions");

                    b.Navigation("MealPeriods");
                });

            modelBuilder.Entity("DataManagementService.Domain.Supplement", b =>
                {
                    b.Navigation("FoundIn");

                    b.Navigation("RelatedExams");

                    b.Navigation("SideEffects");

                    b.Navigation("TreatableDiseases");
                });
#pragma warning restore 612, 618
        }
    }
}
